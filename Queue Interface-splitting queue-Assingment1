mport java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;


class Tester {
    
    public static List<Deque<Patient>> splitQueue(Deque<Patient> patientsQueue) {
	    //Implement your logic here and change the return statement accordingly
    	Deque<Patient> age60=new ArrayDeque<Patient>();
    	Deque<Patient> ageOther=new ArrayDeque<Patient>();
    	List<Deque<Patient>> cointainer=new ArrayList<Deque<Patient>>();
	    for (Patient P:patientsQueue ) {
	    	if (P.getAge()>=60) {
	    		age60.add(P);
	    	}else
	    		ageOther.add(P);
	    }
	    cointainer.add(age60);
	    cointainer.add(ageOther);
	    
	    
		return cointainer;
	}

	public static void main(String[] args) {
		
		Patient patient1=new Patient("Jack","Male",25);
		Patient patient2=new Patient("Tom","Male",64);
		Patient patient3=new Patient("Simona","Female",24);

		Deque<Patient> patientsQueue = new ArrayDeque<Patient>();
		patientsQueue.add(patient1);
		patientsQueue.add(patient2);
		patientsQueue.add(patient3);

		List<Deque<Patient>> queuesList = splitQueue(patientsQueue);
		
		int counter=0;
		for (Deque<Patient> queue : queuesList) {
			if(counter==0)
				System.out.println("Patients in the senior queue\n============================");
			else
				System.out.println("Patients in the normal queue\n============================");
			
			for (Patient patient : queue) {
				System.out.println("Name : "+patient.getName());
				System.out.println("Age : "+patient.getAge());
				System.out.println();
			}
			counter++;
		}	
	}
	

}
